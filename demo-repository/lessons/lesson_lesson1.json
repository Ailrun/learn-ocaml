{
    "learnocaml_version": "1",
    "title": "Simple Expressions",
    "steps": [
      {
        "title": "Simple Expressions",
        "contents": [
          {
            "html": "Numerical expressions are easy to compute in OCaml. For example:"
          },
          {
            "code": "1+2"
          },
          {
            "html": "Strings are also easy to define. For example, you can define a string with your name:"
          },
          {
            "code": "\"Mary\""
          },
          {
            "html": "The basic element of a string is a char:"
          },
          {
            "code": "'a'"
          }
        ]
      },
      {
        "title": "Lists and arrays",
        "contents": [
          {
            "html": "Lists and arrays are predefined data structures, for example you can have a list of integers:"
          },
          {
            "code": "[ 42; 1; 55 ]"
          },
          {
            "html": "An array of strings:"
          },
          {
            "code": "[|\"John\"; \"Doe\"|]"
          }
        ]
      },
      {
        "title": "Operations on lists",
        "contents": [
          {
            "html": "You can use some predefined functions on lists such as reversing the list"
          },
          {
            "code": "List.rev [1; 2; 3]"
          },
          {
            "html": "Get the first element of the list:"
          },
          {
            "code": "List.hd [1; 2; 3]"
          }
        ]
      },
      {
        "title": "Operations on arrays",
        "contents": [
          {
            "html": "You can also use some predefined functions on arrays such as concatenate two arrays"
          },
          {
            "code": "Array.append [| 1; 2 |] [| 3; 4; 5 |]"
          },
          {
            "html": "To get the element number <code>i</code> of an array, you have two ways to do this (don't forget, the first element has number <code>0</code>):"
          },
          {
            "code": "Array.get [| 42; 51; 32 |] 2"
          },
          {
            "html": "or"
          },
          {
            "code": "[| 42; 51; 32 |].(2)"
          }
        ]
      },
      {
        "title": "Basic operations on strings",
        "contents": [
          {
            "html": "Strings are sequences of chars. It is possible to create a string from just one char, using:"
          },
          {
            "code": "String.make 10 'x'"
          },
          {
            "html": "Strings can also be created by joining other strings:"
          },
          {
            "code": "\"Mary\" ^ \" and \" ^ \"John\""
          },
          {
            "html": "It might also be interesting to get the length of a string:"
          },
          {
            "code": "String.length \"abcdefghijklmnopqstuvwxyz\""
          },
          {
            "html": "(and yes, one character is missing !)"
          }
        ]
      },
      {
        "title": "More operations on strings",
        "contents": [
          {
            "html": "There are many operations available on strings, like a function which returns a copy of the argument, with all uppercase letters translated to lowercase:"
          },
          {
            "code": "String.lowercase \"MARY\""
          },
          {
            "html": "Here's a more practical example, generating a filename from components:"
          },
          {
            "code": "String.concat \"/\" [\"\"; \"usr\"; \"local\"; \"bin\"]"
          },
          {
            "html": "Note that the second argument is a list of strings.It is sometimes useful to extract an integer from a string. This is easy in OCaml:"
          },
          {
            "code": "int_of_string \"546\""
          }
        ]
      },
      {
        "title": "Operations on Tuples",
        "contents": [
          {
            "html": "A tuple consists of values (zero or more), enclosed in parentheses and separated by commas. Note that you can have differents types for each element, remember"
          },
          {
            "code": "(42, \"John\", true)"
          },
          {
            "html": "When you have a pair (a tuple with two elements), you can use some predefined functions like get the first element:"
          },
          {
            "code": "fst (42, \"John\")"
          },
          {
            "html": "Or the second element:"
          },
          {
            "code": "snd (42, \"John\")"
          }
        ]
      }
    ]
}
